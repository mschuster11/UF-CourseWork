#include "msp430x22x2.h"

typedef unsigned long int resistance;

void lcd_init(void);
void lcd_command(char);
void lcd_char(char);
void lcd_string(char*);
void lcd_clearDisplay(void);
void lcd_writeInt(unsigned long int);
void lcd_writeResistance(resistance);
char* ulitoa(unsigned long int, char*);



int main()
{

    WDTCTL = WDTPW + WDTHOLD;                 // Stop watchdog timer

    lcd_init();
    resistance count = 950;
    for(;;)
    {
        lcd_writeResistance(count);
        count += 1234;


    }

    return 0;
}

void lcd_command(char uf_lcd_x)
{
    char uf_lcd_temp;

    P4DIR = 0xFF;
    uf_lcd_temp = uf_lcd_x;
    P4OUT = 0x00;
    _delay_cycles(200);

    uf_lcd_x >>= 4;
    uf_lcd_x &= 0x0F;
    uf_lcd_x |= 0x20;
    P4OUT = uf_lcd_x;
    _delay_cycles(200);

    uf_lcd_x &= 0x0F;
    P4OUT = uf_lcd_x;
    _delay_cycles(200);

    P4OUT = 0x00;
    _delay_cycles(200);

    uf_lcd_x = uf_lcd_temp;
    uf_lcd_x &= 0x0F;
    uf_lcd_x |= 0x20;
    P4OUT = uf_lcd_x;
    _delay_cycles(200);

    uf_lcd_x = uf_lcd_x & 0x0F;
    P4OUT = uf_lcd_x;
    _delay_cycles(4000);
}

void lcd_init(void)
{
    lcd_command(0x33);
    lcd_command(0x32);
    lcd_command(0x2C);
    lcd_command(0x0C);
    lcd_command(0x01);
    _delay_cycles(22000);
}

void lcd_char(char uf_lcd_x)
{
    char uf_lcd_temp;

    P4DIR = 0xFF;
    uf_lcd_temp = uf_lcd_x;
    P4OUT = 0x10;

    uf_lcd_x >>= 4;
    uf_lcd_x &= 0x0F;
    uf_lcd_x |= 0x30;
    P4OUT = uf_lcd_x;
    uf_lcd_x &= 0x1F;
    P4OUT = uf_lcd_x;

    P4OUT = 0x10;

    uf_lcd_x = uf_lcd_temp;
    uf_lcd_x &= 0x0F;
    uf_lcd_x |= 0x30;
    P4OUT = uf_lcd_x;

    uf_lcd_x &= 0x1F;
    P4OUT = uf_lcd_x;
}

void lcd_string(char* str)
{
    for(unsigned int index=0; str[index]!='\0'; index++)
        lcd_char(str[index]);
}

void lcd_clearDisplay(void)
{
    lcd_command(0x01);
}



void lcd_writeInt(unsigned long int num)
{
    char buffer[7];
    lcd_string(ulitoa(num, buffer));
}

void lcd_writeResistance(resistance res)
{
    lcd_clearDisplay();
    if((res >= 1000) && (res <= 1000000))
    {
        lcd_string("R = ");
        lcd_writeInt(res);
        lcd_string(" Ohms");
    }
    else
        lcd_string("Out of Range");
}

char* ulitoa(unsigned long int num, char* buffer)
{
    unsigned int itter = 0;
    if(!num)
    {
        buffer[itter] = '0';
        buffer[++itter] = '\0';
    }
    else
    {
       while(num)
       {
           unsigned long int rem = num % 10;
           buffer[itter++] = rem + '0';
           num /= 10;
       }

       buffer[itter] = '\0';

       unsigned int alpha = 0;
       unsigned int omega = --itter;
       while(alpha < omega)
       {
           buffer[alpha] ^= buffer[omega];
           buffer[omega] ^= buffer[alpha];
           buffer[alpha++] ^= buffer[omega--];
       }

    }
    return buffer;
}
