
HardFinal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000810  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000884  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00802000  00802000  00000884  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000045fe  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c69  00000000  00000000  00004f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c4  00000000  00000000  00008bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00009288  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000367b  00000000  00000000  000093c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001af  00000000  00000000  0000ca3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000cbee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_14>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_71>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_88>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a1 30       	cpi	r26, 0x01	; 1
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 73 01 	call	0x2e6	; 0x2e6 <main>
 228:	0c 94 06 04 	jmp	0x80c	; 0x80c <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <INIT_CLK>:
// Inputs: None
// Outputs: None
// Affected: None
void INIT_CLK(void){
	// Enable 32Mhz CLK.
	OSC_CTRL = OSC_RC32MEN_bm;
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>

	// Wait for 32Mhz flag to be set.
	while( !(OSC_STATUS & OSC_RC32MRDY_bm) );
 236:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 23a:	81 ff       	sbrs	r24, 1
 23c:	fc cf       	rjmp	.-8      	; 0x236 <INIT_CLK+0x6>

	// Write to restriction register to allow writing
	// to the CLK CTRL, then sel the 32MHz CLK.
	CPU_CCP = CCP_IOREG_gc;
 23e:	88 ed       	ldi	r24, 0xD8	; 216
 240:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc;
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	90 93 40 00 	sts	0x0040, r25	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>

	// Write to restriction register to allow writing
	// to the CLK PSCTRL, then set the prescaler.
	CPU_CCP = CCP_IOREG_gc;
 248:	84 bf       	out	0x34, r24	; 52
	CLK_PSCTRL = CLK_PRESCALER;
 24a:	10 92 41 00 	sts	0x0041, r1	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
 24e:	08 95       	ret

00000250 <INIT_INTS>:
// Inputs: None
// Outputs: None
// Affected: None
void INIT_INTS(void){
	// Set the PMIC to enable low level interrupts.
	PMIC_CTRL = PMIC_LOLVLEN_bm | PMIC_HILVLEN_bm;
 250:	85 e0       	ldi	r24, 0x05	; 5
 252:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	
	// Set the interrupt enable bit.
	CPU_SREG |= 0x80;
 256:	8f b7       	in	r24, 0x3f	; 63
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	8f bf       	out	0x3f, r24	; 63
 25c:	08 95       	ret

0000025e <INIT_ADC>:
// Inputs: None
// Outputs: None
// Affected: None
void INIT_ADC(void){
	// Set the ADC's reference to AREFB.
	ADCA_REFCTRL = ADC_REFSEL_AREFB_gc;
 25e:	80 e3       	ldi	r24, 0x30	; 48
 260:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>

	// Set the res to 8-bits and signed mode.
	ADCA_CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm | ADC_FREERUN_bm;
 264:	88 e1       	ldi	r24, 0x18	; 24
 266:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>

	// Set the prescaler to div 512.
	//ADCA_PRESCALER = ADC_PRESCALER_DIV512_gc;
	ADCA_PRESCALER = ADC_PRESCALER_DIV32_gc;
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__TEXT_REGION_LENGTH__+0x700204>

	// Set the input pins to be 1 and 6.
	ADCA_CH0_MUXCTRL = ADC_CH_MUXPOS_PIN4_gc | ADC_CH_MUXNEG_PIN5_gc;
 270:	91 e2       	ldi	r25, 0x21	; 33
 272:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>

	// Set the mode to differential voltage with a gain of 1.
	ADCA_CH0_CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;
 276:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
	
	ADCA_CH0_INTCTRL = ADC_CH_INTLVL_LO_gc;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__TEXT_REGION_LENGTH__+0x700222>
	
	// Enable the ADC.
	ADCA_CTRLA = 0x05;
 280:	85 e0       	ldi	r24, 0x05	; 5
 282:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
 286:	08 95       	ret

00000288 <INIT_DAC>:
// Inputs: None
// Outputs: None
// Affected: None
void INIT_DAC(void){
	// Set the direction of the DAC output.
	PORTA_DIRSET = 0x04;
 288:	84 e0       	ldi	r24, 0x04	; 4
 28a:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	
	// Set to single channel mode.
	DACA.CTRLB = 0;
 28e:	e0 e0       	ldi	r30, 0x00	; 0
 290:	f3 e0       	ldi	r31, 0x03	; 3
 292:	11 82       	std	Z+1, r1	; 0x01
	
	// Set PortB as the external reference.
	DACA.CTRLC = 0b00011000;
 294:	88 e1       	ldi	r24, 0x18	; 24
 296:	82 83       	std	Z+2, r24	; 0x02
	
	// Set the persistent data for 0.7V out.
	DACA.CH0DATA= 0x0000;
 298:	10 8e       	std	Z+24, r1	; 0x18
 29a:	11 8e       	std	Z+25, r1	; 0x19
	
	// Enable channel 0 and the DAC.
	DACA.CTRLA = (DAC_CH0EN_bm | DAC_ENABLE_bm);
 29c:	85 e0       	ldi	r24, 0x05	; 5
 29e:	80 83       	st	Z, r24
 2a0:	08 95       	ret

000002a2 <DELAY>:
// Affected: None
void DELAY(void){
	
	//Set the period.
	//TCC0_PER = 125;
	TCC0_PER = TCC_BASE_PER;
 2a2:	8c e8       	ldi	r24, 0x8C	; 140
 2a4:	92 e0       	ldi	r25, 0x02	; 2
 2a6:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 2aa:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
	
	// Enable the interrupt and then the timer.
	TCC0_INTCTRLA = TC_OVFINTLVL_LO_gc;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
	TCC0_CTRLA = TC_CLKSEL_DIV1_gc;
 2b4:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
 2b8:	08 95       	ret

000002ba <INIT_USART>:
// Inputs: None
// Outputs: None
// Affected: None
void INIT_USART(void){
	// Set the direction of the Tx & Rx pins.
	PORTD_DIRSET = USART_TXEN_bm;
 2ba:	88 e0       	ldi	r24, 0x08	; 8
 2bc:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
	PORTD_DIRCLR = USART_RXEN_bm;
 2c0:	80 e1       	ldi	r24, 0x10	; 16
 2c2:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
	
	// Set the baud rate.
	USARTD0_BAUDCTRLA = 0xF5;
 2c6:	85 ef       	ldi	r24, 0xF5	; 245
 2c8:	80 93 a6 09 	sts	0x09A6, r24	; 0x8009a6 <__TEXT_REGION_LENGTH__+0x7009a6>
	USARTD0_BAUDCTRLB = 0xCC;
 2cc:	8c ec       	ldi	r24, 0xCC	; 204
 2ce:	80 93 a7 09 	sts	0x09A7, r24	; 0x8009a7 <__TEXT_REGION_LENGTH__+0x7009a7>
	
	// Set the data size and the mode.
	USARTD0_CTRLC = USART_CHSIZE_8BIT_gc;
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	80 93 a5 09 	sts	0x09A5, r24	; 0x8009a5 <__TEXT_REGION_LENGTH__+0x7009a5>
	USARTD0_CTRLB = 0b00011000;
 2d8:	88 e1       	ldi	r24, 0x18	; 24
 2da:	80 93 a4 09 	sts	0x09A4, r24	; 0x8009a4 <__TEXT_REGION_LENGTH__+0x7009a4>
	
	USARTD0_CTRLA = USART_RXCINTLVL_HI_gc;
 2de:	80 e3       	ldi	r24, 0x30	; 48
 2e0:	80 93 a3 09 	sts	0x09A3, r24	; 0x8009a3 <__TEXT_REGION_LENGTH__+0x7009a3>
 2e4:	08 95       	ret

000002e6 <main>:
static char input = '0';
static uint8_t state = 0;
int main(void)
{
	// Init CLK, pin dir, and ADC.
	INIT_CLK();
 2e6:	0e 94 18 01 	call	0x230	; 0x230 <INIT_CLK>
	INIT_USART();
 2ea:	0e 94 5d 01 	call	0x2ba	; 0x2ba <INIT_USART>
	INIT_INTS();
 2ee:	0e 94 28 01 	call	0x250	; 0x250 <INIT_INTS>
	INIT_ADC();
 2f2:	0e 94 2f 01 	call	0x25e	; 0x25e <INIT_ADC>
	INIT_DAC();
 2f6:	0e 94 44 01 	call	0x288	; 0x288 <INIT_DAC>
	DELAY();
 2fa:	0e 94 51 01 	call	0x2a2	; 0x2a2 <DELAY>
	// Set the direction of the DAC output.
	PORTA_DIRCLR = 0xE0;
 2fe:	80 ee       	ldi	r24, 0xE0	; 224
 300:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
	PORTA_DIRSET = 0x05;
 304:	85 e0       	ldi	r24, 0x05	; 5
 306:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>


	
	
	// Init the DAC.
	INIT_DAC();
 30a:	0e 94 44 01 	call	0x288	; 0x288 <INIT_DAC>
 30e:	ff cf       	rjmp	.-2      	; 0x30e <main+0x28>

00000310 <__vector_71>:
// of ADCA.
// Inputs: None
// Outputs: None
// Affected: None
ISR(ADCA_CH0_vect)
{
 310:	1f 92       	push	r1
 312:	0f 92       	push	r0
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	0f 92       	push	r0
 318:	11 24       	eor	r1, r1
 31a:	08 b6       	in	r0, 0x38	; 56
 31c:	0f 92       	push	r0
 31e:	18 be       	out	0x38, r1	; 56
 320:	0b b6       	in	r0, 0x3b	; 59
 322:	0f 92       	push	r0
 324:	1b be       	out	0x3b, r1	; 59
 326:	8f 93       	push	r24
 328:	ef 93       	push	r30
 32a:	ff 93       	push	r31
	ADCA_CH0_CTRL |=  0x80;
 32c:	e0 e2       	ldi	r30, 0x20	; 32
 32e:	f2 e0       	ldi	r31, 0x02	; 2
 330:	80 81       	ld	r24, Z
 332:	80 68       	ori	r24, 0x80	; 128
 334:	80 83       	st	Z, r24

	return;
}
 336:	ff 91       	pop	r31
 338:	ef 91       	pop	r30
 33a:	8f 91       	pop	r24
 33c:	0f 90       	pop	r0
 33e:	0b be       	out	0x3b, r0	; 59
 340:	0f 90       	pop	r0
 342:	08 be       	out	0x38, r0	; 56
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <__vector_14>:

ISR(TCC0_OVF_vect)
{
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	08 b6       	in	r0, 0x38	; 56
 35a:	0f 92       	push	r0
 35c:	18 be       	out	0x38, r1	; 56
 35e:	09 b6       	in	r0, 0x39	; 57
 360:	0f 92       	push	r0
 362:	19 be       	out	0x39, r1	; 57
 364:	0b b6       	in	r0, 0x3b	; 59
 366:	0f 92       	push	r0
 368:	1b be       	out	0x3b, r1	; 59
 36a:	cf 92       	push	r12
 36c:	df 92       	push	r13
 36e:	ef 92       	push	r14
 370:	ff 92       	push	r15
 372:	2f 93       	push	r18
 374:	3f 93       	push	r19
 376:	4f 93       	push	r20
 378:	5f 93       	push	r21
 37a:	6f 93       	push	r22
 37c:	7f 93       	push	r23
 37e:	8f 93       	push	r24
 380:	9f 93       	push	r25
 382:	af 93       	push	r26
 384:	bf 93       	push	r27
 386:	ef 93       	push	r30
 388:	ff 93       	push	r31
	PORTA_OUTTGL = 1;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x700607>
	double resDec = (1.0/820.0)*(ADCA_CH0RES)*(0xFFF/2.5);
 390:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
 394:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__floatunsisf>
 3a0:	2a e0       	ldi	r18, 0x0A	; 10
 3a2:	38 ed       	ldi	r19, 0xD8	; 216
 3a4:	4f e9       	ldi	r20, 0x9F	; 159
 3a6:	5a e3       	ldi	r21, 0x3A	; 58
 3a8:	0e 94 75 03 	call	0x6ea	; 0x6ea <__mulsf3>
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	30 ec       	ldi	r19, 0xC0	; 192
 3b0:	4c ec       	ldi	r20, 0xCC	; 204
 3b2:	54 e4       	ldi	r21, 0x44	; 68
 3b4:	0e 94 75 03 	call	0x6ea	; 0x6ea <__mulsf3>
 3b8:	6b 01       	movw	r12, r22
 3ba:	7c 01       	movw	r14, r24
	if(resDec > 0xFFF)
 3bc:	20 e0       	ldi	r18, 0x00	; 0
 3be:	30 ef       	ldi	r19, 0xF0	; 240
 3c0:	4f e7       	ldi	r20, 0x7F	; 127
 3c2:	55 e4       	ldi	r21, 0x45	; 69
 3c4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__gesf2>
 3c8:	18 16       	cp	r1, r24
 3ca:	1c f4       	brge	.+6      	; 0x3d2 <__vector_14+0x84>
		resDec = 0;
 3cc:	c1 2c       	mov	r12, r1
 3ce:	d1 2c       	mov	r13, r1
 3d0:	76 01       	movw	r14, r12
	if(state == 0)
 3d2:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 3d6:	81 11       	cpse	r24, r1
 3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <__vector_14+0x92>
		DACA.CH0DATA = resDec;
 3da:	c7 01       	movw	r24, r14
 3dc:	b6 01       	movw	r22, r12
 3de:	13 c0       	rjmp	.+38     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	else if(state == 1)
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	49 f4       	brne	.+18     	; 0x3f6 <__vector_14+0xa8>
		DACA.CH0DATA = resDec/2;
 3e4:	20 e0       	ldi	r18, 0x00	; 0
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	40 e0       	ldi	r20, 0x00	; 0
 3ea:	5f e3       	ldi	r21, 0x3F	; 63
 3ec:	c7 01       	movw	r24, r14
 3ee:	b6 01       	movw	r22, r12
 3f0:	0e 94 75 03 	call	0x6ea	; 0x6ea <__mulsf3>
 3f4:	08 c0       	rjmp	.+16     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	else if(state == 2)
 3f6:	82 30       	cpi	r24, 0x02	; 2
 3f8:	61 f4       	brne	.+24     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		DACA.CH0DATA = resDec*2;
 3fa:	a7 01       	movw	r20, r14
 3fc:	96 01       	movw	r18, r12
 3fe:	c7 01       	movw	r24, r14
 400:	b6 01       	movw	r22, r12
 402:	0e 94 47 02 	call	0x48e	; 0x48e <__addsf3>
 406:	0e 94 b3 02 	call	0x566	; 0x566 <__fixunssfsi>
 40a:	60 93 18 03 	sts	0x0318, r22	; 0x800318 <__TEXT_REGION_LENGTH__+0x700318>
 40e:	70 93 19 03 	sts	0x0319, r23	; 0x800319 <__TEXT_REGION_LENGTH__+0x700319>
	return;
}
 412:	ff 91       	pop	r31
 414:	ef 91       	pop	r30
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	7f 91       	pop	r23
 420:	6f 91       	pop	r22
 422:	5f 91       	pop	r21
 424:	4f 91       	pop	r20
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	ff 90       	pop	r15
 42c:	ef 90       	pop	r14
 42e:	df 90       	pop	r13
 430:	cf 90       	pop	r12
 432:	0f 90       	pop	r0
 434:	0b be       	out	0x3b, r0	; 59
 436:	0f 90       	pop	r0
 438:	09 be       	out	0x39, r0	; 57
 43a:	0f 90       	pop	r0
 43c:	08 be       	out	0x38, r0	; 56
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <__vector_88>:
// Sets up an interrupt to be triggered by a character being 
// over UART. 
// Inputs: None
// Outputs: None
// Affected: TCC1_CNT, input
ISR(USARTD0_RXC_vect){
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	08 b6       	in	r0, 0x38	; 56
 454:	0f 92       	push	r0
 456:	18 be       	out	0x38, r1	; 56
 458:	8f 93       	push	r24
	input = USARTD0_DATA;
 45a:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
			if (input == 'd' || input == 'D')
 45e:	8f 7d       	andi	r24, 0xDF	; 223
 460:	84 34       	cpi	r24, 0x44	; 68
 462:	19 f4       	brne	.+6      	; 0x46a <__vector_88+0x22>
		{
					state = 0;
 464:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <_edata>
			input =0;
 468:	09 c0       	rjmp	.+18     	; 0x47c <__vector_88+0x34>
		}
		else if (input == 'h' || input == 'H')
 46a:	88 34       	cpi	r24, 0x48	; 72
 46c:	11 f4       	brne	.+4      	; 0x472 <__vector_88+0x2a>
		{
				state = 1;	
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	03 c0       	rjmp	.+6      	; 0x478 <__vector_88+0x30>
			input =0;
		}
		else if (input == 't' || input == 'T')
 472:	84 35       	cpi	r24, 0x54	; 84
 474:	19 f4       	brne	.+6      	; 0x47c <__vector_88+0x34>
		{
				state = 2;	
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
			input =0;
		}
	return;
}
 47c:	8f 91       	pop	r24
 47e:	0f 90       	pop	r0
 480:	08 be       	out	0x38, r0	; 56
 482:	0f 90       	pop	r0
 484:	0f be       	out	0x3f, r0	; 63
 486:	0f 90       	pop	r0
 488:	1f 90       	pop	r1
 48a:	18 95       	reti

0000048c <__subsf3>:
 48c:	50 58       	subi	r21, 0x80	; 128

0000048e <__addsf3>:
 48e:	bb 27       	eor	r27, r27
 490:	aa 27       	eor	r26, r26
 492:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__addsf3x>
 496:	0c 94 36 03 	jmp	0x66c	; 0x66c <__fp_round>
 49a:	0e 94 28 03 	call	0x650	; 0x650 <__fp_pscA>
 49e:	38 f0       	brcs	.+14     	; 0x4ae <__addsf3+0x20>
 4a0:	0e 94 2f 03 	call	0x65e	; 0x65e <__fp_pscB>
 4a4:	20 f0       	brcs	.+8      	; 0x4ae <__addsf3+0x20>
 4a6:	39 f4       	brne	.+14     	; 0x4b6 <__addsf3+0x28>
 4a8:	9f 3f       	cpi	r25, 0xFF	; 255
 4aa:	19 f4       	brne	.+6      	; 0x4b2 <__addsf3+0x24>
 4ac:	26 f4       	brtc	.+8      	; 0x4b6 <__addsf3+0x28>
 4ae:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_nan>
 4b2:	0e f4       	brtc	.+2      	; 0x4b6 <__addsf3+0x28>
 4b4:	e0 95       	com	r30
 4b6:	e7 fb       	bst	r30, 7
 4b8:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_inf>

000004bc <__addsf3x>:
 4bc:	e9 2f       	mov	r30, r25
 4be:	0e 94 47 03 	call	0x68e	; 0x68e <__fp_split3>
 4c2:	58 f3       	brcs	.-42     	; 0x49a <__addsf3+0xc>
 4c4:	ba 17       	cp	r27, r26
 4c6:	62 07       	cpc	r22, r18
 4c8:	73 07       	cpc	r23, r19
 4ca:	84 07       	cpc	r24, r20
 4cc:	95 07       	cpc	r25, r21
 4ce:	20 f0       	brcs	.+8      	; 0x4d8 <__addsf3x+0x1c>
 4d0:	79 f4       	brne	.+30     	; 0x4f0 <__addsf3x+0x34>
 4d2:	a6 f5       	brtc	.+104    	; 0x53c <__addsf3x+0x80>
 4d4:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__fp_zero>
 4d8:	0e f4       	brtc	.+2      	; 0x4dc <__addsf3x+0x20>
 4da:	e0 95       	com	r30
 4dc:	0b 2e       	mov	r0, r27
 4de:	ba 2f       	mov	r27, r26
 4e0:	a0 2d       	mov	r26, r0
 4e2:	0b 01       	movw	r0, r22
 4e4:	b9 01       	movw	r22, r18
 4e6:	90 01       	movw	r18, r0
 4e8:	0c 01       	movw	r0, r24
 4ea:	ca 01       	movw	r24, r20
 4ec:	a0 01       	movw	r20, r0
 4ee:	11 24       	eor	r1, r1
 4f0:	ff 27       	eor	r31, r31
 4f2:	59 1b       	sub	r21, r25
 4f4:	99 f0       	breq	.+38     	; 0x51c <__addsf3x+0x60>
 4f6:	59 3f       	cpi	r21, 0xF9	; 249
 4f8:	50 f4       	brcc	.+20     	; 0x50e <__addsf3x+0x52>
 4fa:	50 3e       	cpi	r21, 0xE0	; 224
 4fc:	68 f1       	brcs	.+90     	; 0x558 <__addsf3x+0x9c>
 4fe:	1a 16       	cp	r1, r26
 500:	f0 40       	sbci	r31, 0x00	; 0
 502:	a2 2f       	mov	r26, r18
 504:	23 2f       	mov	r18, r19
 506:	34 2f       	mov	r19, r20
 508:	44 27       	eor	r20, r20
 50a:	58 5f       	subi	r21, 0xF8	; 248
 50c:	f3 cf       	rjmp	.-26     	; 0x4f4 <__addsf3x+0x38>
 50e:	46 95       	lsr	r20
 510:	37 95       	ror	r19
 512:	27 95       	ror	r18
 514:	a7 95       	ror	r26
 516:	f0 40       	sbci	r31, 0x00	; 0
 518:	53 95       	inc	r21
 51a:	c9 f7       	brne	.-14     	; 0x50e <__addsf3x+0x52>
 51c:	7e f4       	brtc	.+30     	; 0x53c <__addsf3x+0x80>
 51e:	1f 16       	cp	r1, r31
 520:	ba 0b       	sbc	r27, r26
 522:	62 0b       	sbc	r22, r18
 524:	73 0b       	sbc	r23, r19
 526:	84 0b       	sbc	r24, r20
 528:	ba f0       	brmi	.+46     	; 0x558 <__addsf3x+0x9c>
 52a:	91 50       	subi	r25, 0x01	; 1
 52c:	a1 f0       	breq	.+40     	; 0x556 <__addsf3x+0x9a>
 52e:	ff 0f       	add	r31, r31
 530:	bb 1f       	adc	r27, r27
 532:	66 1f       	adc	r22, r22
 534:	77 1f       	adc	r23, r23
 536:	88 1f       	adc	r24, r24
 538:	c2 f7       	brpl	.-16     	; 0x52a <__addsf3x+0x6e>
 53a:	0e c0       	rjmp	.+28     	; 0x558 <__addsf3x+0x9c>
 53c:	ba 0f       	add	r27, r26
 53e:	62 1f       	adc	r22, r18
 540:	73 1f       	adc	r23, r19
 542:	84 1f       	adc	r24, r20
 544:	48 f4       	brcc	.+18     	; 0x558 <__addsf3x+0x9c>
 546:	87 95       	ror	r24
 548:	77 95       	ror	r23
 54a:	67 95       	ror	r22
 54c:	b7 95       	ror	r27
 54e:	f7 95       	ror	r31
 550:	9e 3f       	cpi	r25, 0xFE	; 254
 552:	08 f0       	brcs	.+2      	; 0x556 <__addsf3x+0x9a>
 554:	b0 cf       	rjmp	.-160    	; 0x4b6 <__addsf3+0x28>
 556:	93 95       	inc	r25
 558:	88 0f       	add	r24, r24
 55a:	08 f0       	brcs	.+2      	; 0x55e <__addsf3x+0xa2>
 55c:	99 27       	eor	r25, r25
 55e:	ee 0f       	add	r30, r30
 560:	97 95       	ror	r25
 562:	87 95       	ror	r24
 564:	08 95       	ret

00000566 <__fixunssfsi>:
 566:	0e 94 4f 03 	call	0x69e	; 0x69e <__fp_splitA>
 56a:	88 f0       	brcs	.+34     	; 0x58e <__fixunssfsi+0x28>
 56c:	9f 57       	subi	r25, 0x7F	; 127
 56e:	98 f0       	brcs	.+38     	; 0x596 <__fixunssfsi+0x30>
 570:	b9 2f       	mov	r27, r25
 572:	99 27       	eor	r25, r25
 574:	b7 51       	subi	r27, 0x17	; 23
 576:	b0 f0       	brcs	.+44     	; 0x5a4 <__fixunssfsi+0x3e>
 578:	e1 f0       	breq	.+56     	; 0x5b2 <__fixunssfsi+0x4c>
 57a:	66 0f       	add	r22, r22
 57c:	77 1f       	adc	r23, r23
 57e:	88 1f       	adc	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	1a f0       	brmi	.+6      	; 0x58a <__fixunssfsi+0x24>
 584:	ba 95       	dec	r27
 586:	c9 f7       	brne	.-14     	; 0x57a <__fixunssfsi+0x14>
 588:	14 c0       	rjmp	.+40     	; 0x5b2 <__fixunssfsi+0x4c>
 58a:	b1 30       	cpi	r27, 0x01	; 1
 58c:	91 f0       	breq	.+36     	; 0x5b2 <__fixunssfsi+0x4c>
 58e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__fp_zero>
 592:	b1 e0       	ldi	r27, 0x01	; 1
 594:	08 95       	ret
 596:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__fp_zero>
 59a:	67 2f       	mov	r22, r23
 59c:	78 2f       	mov	r23, r24
 59e:	88 27       	eor	r24, r24
 5a0:	b8 5f       	subi	r27, 0xF8	; 248
 5a2:	39 f0       	breq	.+14     	; 0x5b2 <__fixunssfsi+0x4c>
 5a4:	b9 3f       	cpi	r27, 0xF9	; 249
 5a6:	cc f3       	brlt	.-14     	; 0x59a <__fixunssfsi+0x34>
 5a8:	86 95       	lsr	r24
 5aa:	77 95       	ror	r23
 5ac:	67 95       	ror	r22
 5ae:	b3 95       	inc	r27
 5b0:	d9 f7       	brne	.-10     	; 0x5a8 <__fixunssfsi+0x42>
 5b2:	3e f4       	brtc	.+14     	; 0x5c2 <__fixunssfsi+0x5c>
 5b4:	90 95       	com	r25
 5b6:	80 95       	com	r24
 5b8:	70 95       	com	r23
 5ba:	61 95       	neg	r22
 5bc:	7f 4f       	sbci	r23, 0xFF	; 255
 5be:	8f 4f       	sbci	r24, 0xFF	; 255
 5c0:	9f 4f       	sbci	r25, 0xFF	; 255
 5c2:	08 95       	ret

000005c4 <__floatunsisf>:
 5c4:	e8 94       	clt
 5c6:	09 c0       	rjmp	.+18     	; 0x5da <__floatsisf+0x12>

000005c8 <__floatsisf>:
 5c8:	97 fb       	bst	r25, 7
 5ca:	3e f4       	brtc	.+14     	; 0x5da <__floatsisf+0x12>
 5cc:	90 95       	com	r25
 5ce:	80 95       	com	r24
 5d0:	70 95       	com	r23
 5d2:	61 95       	neg	r22
 5d4:	7f 4f       	sbci	r23, 0xFF	; 255
 5d6:	8f 4f       	sbci	r24, 0xFF	; 255
 5d8:	9f 4f       	sbci	r25, 0xFF	; 255
 5da:	99 23       	and	r25, r25
 5dc:	a9 f0       	breq	.+42     	; 0x608 <__floatsisf+0x40>
 5de:	f9 2f       	mov	r31, r25
 5e0:	96 e9       	ldi	r25, 0x96	; 150
 5e2:	bb 27       	eor	r27, r27
 5e4:	93 95       	inc	r25
 5e6:	f6 95       	lsr	r31
 5e8:	87 95       	ror	r24
 5ea:	77 95       	ror	r23
 5ec:	67 95       	ror	r22
 5ee:	b7 95       	ror	r27
 5f0:	f1 11       	cpse	r31, r1
 5f2:	f8 cf       	rjmp	.-16     	; 0x5e4 <__floatsisf+0x1c>
 5f4:	fa f4       	brpl	.+62     	; 0x634 <__floatsisf+0x6c>
 5f6:	bb 0f       	add	r27, r27
 5f8:	11 f4       	brne	.+4      	; 0x5fe <__floatsisf+0x36>
 5fa:	60 ff       	sbrs	r22, 0
 5fc:	1b c0       	rjmp	.+54     	; 0x634 <__floatsisf+0x6c>
 5fe:	6f 5f       	subi	r22, 0xFF	; 255
 600:	7f 4f       	sbci	r23, 0xFF	; 255
 602:	8f 4f       	sbci	r24, 0xFF	; 255
 604:	9f 4f       	sbci	r25, 0xFF	; 255
 606:	16 c0       	rjmp	.+44     	; 0x634 <__floatsisf+0x6c>
 608:	88 23       	and	r24, r24
 60a:	11 f0       	breq	.+4      	; 0x610 <__floatsisf+0x48>
 60c:	96 e9       	ldi	r25, 0x96	; 150
 60e:	11 c0       	rjmp	.+34     	; 0x632 <__floatsisf+0x6a>
 610:	77 23       	and	r23, r23
 612:	21 f0       	breq	.+8      	; 0x61c <__floatsisf+0x54>
 614:	9e e8       	ldi	r25, 0x8E	; 142
 616:	87 2f       	mov	r24, r23
 618:	76 2f       	mov	r23, r22
 61a:	05 c0       	rjmp	.+10     	; 0x626 <__floatsisf+0x5e>
 61c:	66 23       	and	r22, r22
 61e:	71 f0       	breq	.+28     	; 0x63c <__floatsisf+0x74>
 620:	96 e8       	ldi	r25, 0x86	; 134
 622:	86 2f       	mov	r24, r22
 624:	70 e0       	ldi	r23, 0x00	; 0
 626:	60 e0       	ldi	r22, 0x00	; 0
 628:	2a f0       	brmi	.+10     	; 0x634 <__floatsisf+0x6c>
 62a:	9a 95       	dec	r25
 62c:	66 0f       	add	r22, r22
 62e:	77 1f       	adc	r23, r23
 630:	88 1f       	adc	r24, r24
 632:	da f7       	brpl	.-10     	; 0x62a <__floatsisf+0x62>
 634:	88 0f       	add	r24, r24
 636:	96 95       	lsr	r25
 638:	87 95       	ror	r24
 63a:	97 f9       	bld	r25, 7
 63c:	08 95       	ret

0000063e <__fp_inf>:
 63e:	97 f9       	bld	r25, 7
 640:	9f 67       	ori	r25, 0x7F	; 127
 642:	80 e8       	ldi	r24, 0x80	; 128
 644:	70 e0       	ldi	r23, 0x00	; 0
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	08 95       	ret

0000064a <__fp_nan>:
 64a:	9f ef       	ldi	r25, 0xFF	; 255
 64c:	80 ec       	ldi	r24, 0xC0	; 192
 64e:	08 95       	ret

00000650 <__fp_pscA>:
 650:	00 24       	eor	r0, r0
 652:	0a 94       	dec	r0
 654:	16 16       	cp	r1, r22
 656:	17 06       	cpc	r1, r23
 658:	18 06       	cpc	r1, r24
 65a:	09 06       	cpc	r0, r25
 65c:	08 95       	ret

0000065e <__fp_pscB>:
 65e:	00 24       	eor	r0, r0
 660:	0a 94       	dec	r0
 662:	12 16       	cp	r1, r18
 664:	13 06       	cpc	r1, r19
 666:	14 06       	cpc	r1, r20
 668:	05 06       	cpc	r0, r21
 66a:	08 95       	ret

0000066c <__fp_round>:
 66c:	09 2e       	mov	r0, r25
 66e:	03 94       	inc	r0
 670:	00 0c       	add	r0, r0
 672:	11 f4       	brne	.+4      	; 0x678 <__fp_round+0xc>
 674:	88 23       	and	r24, r24
 676:	52 f0       	brmi	.+20     	; 0x68c <__fp_round+0x20>
 678:	bb 0f       	add	r27, r27
 67a:	40 f4       	brcc	.+16     	; 0x68c <__fp_round+0x20>
 67c:	bf 2b       	or	r27, r31
 67e:	11 f4       	brne	.+4      	; 0x684 <__fp_round+0x18>
 680:	60 ff       	sbrs	r22, 0
 682:	04 c0       	rjmp	.+8      	; 0x68c <__fp_round+0x20>
 684:	6f 5f       	subi	r22, 0xFF	; 255
 686:	7f 4f       	sbci	r23, 0xFF	; 255
 688:	8f 4f       	sbci	r24, 0xFF	; 255
 68a:	9f 4f       	sbci	r25, 0xFF	; 255
 68c:	08 95       	ret

0000068e <__fp_split3>:
 68e:	57 fd       	sbrc	r21, 7
 690:	90 58       	subi	r25, 0x80	; 128
 692:	44 0f       	add	r20, r20
 694:	55 1f       	adc	r21, r21
 696:	59 f0       	breq	.+22     	; 0x6ae <__fp_splitA+0x10>
 698:	5f 3f       	cpi	r21, 0xFF	; 255
 69a:	71 f0       	breq	.+28     	; 0x6b8 <__fp_splitA+0x1a>
 69c:	47 95       	ror	r20

0000069e <__fp_splitA>:
 69e:	88 0f       	add	r24, r24
 6a0:	97 fb       	bst	r25, 7
 6a2:	99 1f       	adc	r25, r25
 6a4:	61 f0       	breq	.+24     	; 0x6be <__fp_splitA+0x20>
 6a6:	9f 3f       	cpi	r25, 0xFF	; 255
 6a8:	79 f0       	breq	.+30     	; 0x6c8 <__fp_splitA+0x2a>
 6aa:	87 95       	ror	r24
 6ac:	08 95       	ret
 6ae:	12 16       	cp	r1, r18
 6b0:	13 06       	cpc	r1, r19
 6b2:	14 06       	cpc	r1, r20
 6b4:	55 1f       	adc	r21, r21
 6b6:	f2 cf       	rjmp	.-28     	; 0x69c <__fp_split3+0xe>
 6b8:	46 95       	lsr	r20
 6ba:	f1 df       	rcall	.-30     	; 0x69e <__fp_splitA>
 6bc:	08 c0       	rjmp	.+16     	; 0x6ce <__fp_splitA+0x30>
 6be:	16 16       	cp	r1, r22
 6c0:	17 06       	cpc	r1, r23
 6c2:	18 06       	cpc	r1, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	f1 cf       	rjmp	.-30     	; 0x6aa <__fp_splitA+0xc>
 6c8:	86 95       	lsr	r24
 6ca:	71 05       	cpc	r23, r1
 6cc:	61 05       	cpc	r22, r1
 6ce:	08 94       	sec
 6d0:	08 95       	ret

000006d2 <__fp_zero>:
 6d2:	e8 94       	clt

000006d4 <__fp_szero>:
 6d4:	bb 27       	eor	r27, r27
 6d6:	66 27       	eor	r22, r22
 6d8:	77 27       	eor	r23, r23
 6da:	cb 01       	movw	r24, r22
 6dc:	97 f9       	bld	r25, 7
 6de:	08 95       	ret

000006e0 <__gesf2>:
 6e0:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__fp_cmp>
 6e4:	08 f4       	brcc	.+2      	; 0x6e8 <__gesf2+0x8>
 6e6:	8f ef       	ldi	r24, 0xFF	; 255
 6e8:	08 95       	ret

000006ea <__mulsf3>:
 6ea:	0e 94 88 03 	call	0x710	; 0x710 <__mulsf3x>
 6ee:	0c 94 36 03 	jmp	0x66c	; 0x66c <__fp_round>
 6f2:	0e 94 28 03 	call	0x650	; 0x650 <__fp_pscA>
 6f6:	38 f0       	brcs	.+14     	; 0x706 <__mulsf3+0x1c>
 6f8:	0e 94 2f 03 	call	0x65e	; 0x65e <__fp_pscB>
 6fc:	20 f0       	brcs	.+8      	; 0x706 <__mulsf3+0x1c>
 6fe:	95 23       	and	r25, r21
 700:	11 f0       	breq	.+4      	; 0x706 <__mulsf3+0x1c>
 702:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_inf>
 706:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_nan>
 70a:	11 24       	eor	r1, r1
 70c:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__fp_szero>

00000710 <__mulsf3x>:
 710:	0e 94 47 03 	call	0x68e	; 0x68e <__fp_split3>
 714:	70 f3       	brcs	.-36     	; 0x6f2 <__mulsf3+0x8>

00000716 <__mulsf3_pse>:
 716:	95 9f       	mul	r25, r21
 718:	c1 f3       	breq	.-16     	; 0x70a <__mulsf3+0x20>
 71a:	95 0f       	add	r25, r21
 71c:	50 e0       	ldi	r21, 0x00	; 0
 71e:	55 1f       	adc	r21, r21
 720:	62 9f       	mul	r22, r18
 722:	f0 01       	movw	r30, r0
 724:	72 9f       	mul	r23, r18
 726:	bb 27       	eor	r27, r27
 728:	f0 0d       	add	r31, r0
 72a:	b1 1d       	adc	r27, r1
 72c:	63 9f       	mul	r22, r19
 72e:	aa 27       	eor	r26, r26
 730:	f0 0d       	add	r31, r0
 732:	b1 1d       	adc	r27, r1
 734:	aa 1f       	adc	r26, r26
 736:	64 9f       	mul	r22, r20
 738:	66 27       	eor	r22, r22
 73a:	b0 0d       	add	r27, r0
 73c:	a1 1d       	adc	r26, r1
 73e:	66 1f       	adc	r22, r22
 740:	82 9f       	mul	r24, r18
 742:	22 27       	eor	r18, r18
 744:	b0 0d       	add	r27, r0
 746:	a1 1d       	adc	r26, r1
 748:	62 1f       	adc	r22, r18
 74a:	73 9f       	mul	r23, r19
 74c:	b0 0d       	add	r27, r0
 74e:	a1 1d       	adc	r26, r1
 750:	62 1f       	adc	r22, r18
 752:	83 9f       	mul	r24, r19
 754:	a0 0d       	add	r26, r0
 756:	61 1d       	adc	r22, r1
 758:	22 1f       	adc	r18, r18
 75a:	74 9f       	mul	r23, r20
 75c:	33 27       	eor	r19, r19
 75e:	a0 0d       	add	r26, r0
 760:	61 1d       	adc	r22, r1
 762:	23 1f       	adc	r18, r19
 764:	84 9f       	mul	r24, r20
 766:	60 0d       	add	r22, r0
 768:	21 1d       	adc	r18, r1
 76a:	82 2f       	mov	r24, r18
 76c:	76 2f       	mov	r23, r22
 76e:	6a 2f       	mov	r22, r26
 770:	11 24       	eor	r1, r1
 772:	9f 57       	subi	r25, 0x7F	; 127
 774:	50 40       	sbci	r21, 0x00	; 0
 776:	9a f0       	brmi	.+38     	; 0x79e <__mulsf3_pse+0x88>
 778:	f1 f0       	breq	.+60     	; 0x7b6 <__mulsf3_pse+0xa0>
 77a:	88 23       	and	r24, r24
 77c:	4a f0       	brmi	.+18     	; 0x790 <__mulsf3_pse+0x7a>
 77e:	ee 0f       	add	r30, r30
 780:	ff 1f       	adc	r31, r31
 782:	bb 1f       	adc	r27, r27
 784:	66 1f       	adc	r22, r22
 786:	77 1f       	adc	r23, r23
 788:	88 1f       	adc	r24, r24
 78a:	91 50       	subi	r25, 0x01	; 1
 78c:	50 40       	sbci	r21, 0x00	; 0
 78e:	a9 f7       	brne	.-22     	; 0x77a <__mulsf3_pse+0x64>
 790:	9e 3f       	cpi	r25, 0xFE	; 254
 792:	51 05       	cpc	r21, r1
 794:	80 f0       	brcs	.+32     	; 0x7b6 <__mulsf3_pse+0xa0>
 796:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__fp_inf>
 79a:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__fp_szero>
 79e:	5f 3f       	cpi	r21, 0xFF	; 255
 7a0:	e4 f3       	brlt	.-8      	; 0x79a <__mulsf3_pse+0x84>
 7a2:	98 3e       	cpi	r25, 0xE8	; 232
 7a4:	d4 f3       	brlt	.-12     	; 0x79a <__mulsf3_pse+0x84>
 7a6:	86 95       	lsr	r24
 7a8:	77 95       	ror	r23
 7aa:	67 95       	ror	r22
 7ac:	b7 95       	ror	r27
 7ae:	f7 95       	ror	r31
 7b0:	e7 95       	ror	r30
 7b2:	9f 5f       	subi	r25, 0xFF	; 255
 7b4:	c1 f7       	brne	.-16     	; 0x7a6 <__mulsf3_pse+0x90>
 7b6:	fe 2b       	or	r31, r30
 7b8:	88 0f       	add	r24, r24
 7ba:	91 1d       	adc	r25, r1
 7bc:	96 95       	lsr	r25
 7be:	87 95       	ror	r24
 7c0:	97 f9       	bld	r25, 7
 7c2:	08 95       	ret

000007c4 <__fp_cmp>:
 7c4:	99 0f       	add	r25, r25
 7c6:	00 08       	sbc	r0, r0
 7c8:	55 0f       	add	r21, r21
 7ca:	aa 0b       	sbc	r26, r26
 7cc:	e0 e8       	ldi	r30, 0x80	; 128
 7ce:	fe ef       	ldi	r31, 0xFE	; 254
 7d0:	16 16       	cp	r1, r22
 7d2:	17 06       	cpc	r1, r23
 7d4:	e8 07       	cpc	r30, r24
 7d6:	f9 07       	cpc	r31, r25
 7d8:	c0 f0       	brcs	.+48     	; 0x80a <__fp_cmp+0x46>
 7da:	12 16       	cp	r1, r18
 7dc:	13 06       	cpc	r1, r19
 7de:	e4 07       	cpc	r30, r20
 7e0:	f5 07       	cpc	r31, r21
 7e2:	98 f0       	brcs	.+38     	; 0x80a <__fp_cmp+0x46>
 7e4:	62 1b       	sub	r22, r18
 7e6:	73 0b       	sbc	r23, r19
 7e8:	84 0b       	sbc	r24, r20
 7ea:	95 0b       	sbc	r25, r21
 7ec:	39 f4       	brne	.+14     	; 0x7fc <__fp_cmp+0x38>
 7ee:	0a 26       	eor	r0, r26
 7f0:	61 f0       	breq	.+24     	; 0x80a <__fp_cmp+0x46>
 7f2:	23 2b       	or	r18, r19
 7f4:	24 2b       	or	r18, r20
 7f6:	25 2b       	or	r18, r21
 7f8:	21 f4       	brne	.+8      	; 0x802 <__fp_cmp+0x3e>
 7fa:	08 95       	ret
 7fc:	0a 26       	eor	r0, r26
 7fe:	09 f4       	brne	.+2      	; 0x802 <__fp_cmp+0x3e>
 800:	a1 40       	sbci	r26, 0x01	; 1
 802:	a6 95       	lsr	r26
 804:	8f ef       	ldi	r24, 0xFF	; 255
 806:	81 1d       	adc	r24, r1
 808:	81 1d       	adc	r24, r1
 80a:	08 95       	ret

0000080c <_exit>:
 80c:	f8 94       	cli

0000080e <__stop_program>:
 80e:	ff cf       	rjmp	.-2      	; 0x80e <__stop_program>
