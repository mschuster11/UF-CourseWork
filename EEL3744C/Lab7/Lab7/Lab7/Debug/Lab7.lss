
Lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000402  00802000  000008c6  0000093a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000d3c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d6c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004a30  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003d21  00000000  00000000  0000585c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000877  00000000  00000000  0000957d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00009df4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003c3d  00000000  00000000  00009f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b7  00000000  00000000  0000db51  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000dd08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  38:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__vector_14>
  3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__vector_20>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  7c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  80:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  84:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  88:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  8c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  90:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  94:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  98:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  9c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  fc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 100:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 104:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 108:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 10c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 110:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 114:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 118:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 11c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 120:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 124:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 128:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 12c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 130:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 134:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 138:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 13c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 140:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 144:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 148:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 14c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 150:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 154:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 158:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 15c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 160:	0c 94 c0 02 	jmp	0x580	; 0x580 <__vector_88>
 164:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 168:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 16c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 170:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 174:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 178:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 17c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 180:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 184:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 188:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 18c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 190:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 194:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 198:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 19c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	14 e2       	ldi	r17, 0x24	; 36
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e6 ec       	ldi	r30, 0xC6	; 198
 21c:	f8 e0       	ldi	r31, 0x08	; 8
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a2 30       	cpi	r26, 0x02	; 2
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <main>
 234:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <_exit>

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <INIT_CLK>:
// Inputs: None
// Outputs: None
// Affected: None
void INIT_CLK(void){
	// Enable 32Mhz CLK.
	OSC_CTRL = OSC_RC32MEN_bm;
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>

	// Wait for 32Mhz flag to be set.
	while( !(OSC_STATUS & OSC_RC32MRDY_bm) );
 242:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 246:	81 ff       	sbrs	r24, 1
 248:	fc cf       	rjmp	.-8      	; 0x242 <INIT_CLK+0x6>

	// Write to restriction register to allow writing
	// to the CLK CTRL, then sel the 32MHz CLK.
	CPU_CCP = CCP_IOREG_gc;
 24a:	88 ed       	ldi	r24, 0xD8	; 216
 24c:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc;
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	90 93 40 00 	sts	0x0040, r25	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>

	// Write to restriction register to allow writing
	// to the CLK PSCTRL, then set the prescaler.
	CPU_CCP = CCP_IOREG_gc;
 254:	84 bf       	out	0x34, r24	; 52
	CLK_PSCTRL = CLK_PRESCALER;
 256:	10 92 41 00 	sts	0x0041, r1	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>
 25a:	08 95       	ret

0000025c <INIT_USART>:
// Inputs: None
// Outputs: None
// Affected: None
void INIT_USART(void){
	// Set the direction of the Tx & Rx pins.
	PORTD_DIRSET = USART_TXEN_bm;
 25c:	88 e0       	ldi	r24, 0x08	; 8
 25e:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
	PORTD_DIRCLR = USART_RXEN_bm;
 262:	80 e1       	ldi	r24, 0x10	; 16
 264:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
	
	// Set the baud rate.
	USARTD0_BAUDCTRLA = 1;
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	90 93 a6 09 	sts	0x09A6, r25	; 0x8009a6 <__TEXT_REGION_LENGTH__+0x7009a6>
	USARTD0_BAUDCTRLB = 0;
 26e:	10 92 a7 09 	sts	0x09A7, r1	; 0x8009a7 <__TEXT_REGION_LENGTH__+0x7009a7>
	
	// Set the data size and the mode.
	USARTD0_CTRLC = USART_CHSIZE_8BIT_gc;
 272:	93 e0       	ldi	r25, 0x03	; 3
 274:	90 93 a5 09 	sts	0x09A5, r25	; 0x8009a5 <__TEXT_REGION_LENGTH__+0x7009a5>
	USARTD0_CTRLB = 0b00011000;
 278:	98 e1       	ldi	r25, 0x18	; 24
 27a:	90 93 a4 09 	sts	0x09A4, r25	; 0x8009a4 <__TEXT_REGION_LENGTH__+0x7009a4>
	
	USARTD0_CTRLA = USART_RXCINTLVL_LO_gc;
 27e:	80 93 a3 09 	sts	0x09A3, r24	; 0x8009a3 <__TEXT_REGION_LENGTH__+0x7009a3>
 282:	08 95       	ret

00000284 <INIT_INTS>:
// Inputs: None
// Outputs: None
// Affected: None
void INIT_INTS(void){
	// Set the PMIC to enable low level interrupts.
	PMIC_CTRL = PMIC_LOLVLEN_bm;
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	
	// Set the interrupt enable bit.
	CPU_SREG |= 0x80;
 28a:	8f b7       	in	r24, 0x3f	; 63
 28c:	80 68       	ori	r24, 0x80	; 128
 28e:	8f bf       	out	0x3f, r24	; 63
 290:	08 95       	ret

00000292 <INIT_DAC>:
// Inputs: None
// Outputs: None
// Affected: None
void INIT_DAC(void){
	// Set the direction of the DAC output.
	PORTA_DIRSET = 0x08;
 292:	88 e0       	ldi	r24, 0x08	; 8
 294:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
	
	// Set to single channel mode.
	DACA.CTRLB = DAC_CHSEL0_bm; // Header conflicts with doc3881. This value enables channel 1.
 298:	e0 e0       	ldi	r30, 0x00	; 0
 29a:	f3 e0       	ldi	r31, 0x03	; 3
 29c:	80 e2       	ldi	r24, 0x20	; 32
 29e:	81 83       	std	Z+1, r24	; 0x01
	
	// Set PortB as the external reference.
	DACA.CTRLC = 0b00011000;
 2a0:	88 e1       	ldi	r24, 0x18	; 24
 2a2:	82 83       	std	Z+2, r24	; 0x02
	
	// Set the persistent data for 0.7V out.
	DACA.CH1DATA= 0x0000;
 2a4:	12 8e       	std	Z+26, r1	; 0x1a
 2a6:	13 8e       	std	Z+27, r1	; 0x1b
	
	// Enable channel 0 and the DAC.
	DACA.CTRLA = (DAC_CH1EN_bm | DAC_ENABLE_bm);
 2a8:	89 e0       	ldi	r24, 0x09	; 9
 2aa:	80 83       	st	Z, r24
 2ac:	08 95       	ret

000002ae <INIT_DMA>:
// Inputs: None
// Outputs: None
// Affected: None
void INIT_DMA(void){
	
	DMA.CTRL = 0;
 2ae:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
	DMA.CTRL = DMA_RESET_bm;
 2b2:	80 e4       	ldi	r24, 0x40	; 64
 2b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
	while ((DMA.CTRL & DMA_RESET_bm) != 0);
 2b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
 2bc:	86 fd       	sbrc	r24, 6
 2be:	fc cf       	rjmp	.-8      	; 0x2b8 <INIT_DMA+0xa>
	
	DMA.CTRL			= DMA_ENABLE_bm;
 2c0:	80 e8       	ldi	r24, 0x80	; 128
 2c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
	DMA.CH0.CTRLA		= DMA_CH_ENABLE_bm | DMA_CH_BURSTLEN0_bm | DMA_CH_REPEAT_bm | DMA_CH_SINGLE_bm	;
 2c6:	85 ea       	ldi	r24, 0xA5	; 165
 2c8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__TEXT_REGION_LENGTH__+0x700110>
	DMA.CH0.ADDRCTRL	= DMA_CH_SRCRELOAD_BLOCK_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc;
 2cc:	89 e5       	ldi	r24, 0x59	; 89
 2ce:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__TEXT_REGION_LENGTH__+0x700112>
	DMA.CH0.TRIGSRC		= DMA_CH_TRIGSRC_TCC0_OVF_gc;
 2d2:	80 e4       	ldi	r24, 0x40	; 64
 2d4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__TEXT_REGION_LENGTH__+0x700113>
	DMA.CH0.TRFCNT		= 512;	// Sample num * bytes per smaple.
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	92 e0       	ldi	r25, 0x02	; 2
 2dc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
 2e0:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
	DMA.CH0.REPCNT		= 0x00; // Repeat endlessly.
 2e4:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__TEXT_REGION_LENGTH__+0x700116>
	DMA.CH0.SRCADDR0	= ( (uint16_t) &sineLUTData[0]) >> 0;
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	92 e2       	ldi	r25, 0x22	; 34
 2ec:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__TEXT_REGION_LENGTH__+0x700118>
	DMA.CH0.SRCADDR1	= ( (uint16_t) &sineLUTData[0]) >> 8;
 2f0:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__TEXT_REGION_LENGTH__+0x700119>
	DMA.CH0.SRCADDR2	= 0x00;
 2f4:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__TEXT_REGION_LENGTH__+0x70011a>
	DMA.CH0.DESTADDR0	= (( (uint16_t) &DACA.CH1DATA) >> 0) &0xFF;
 2f8:	8a e1       	ldi	r24, 0x1A	; 26
 2fa:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__TEXT_REGION_LENGTH__+0x70011c>
	DMA.CH0.DESTADDR1	=  ( (uint16_t) &DACA.CH1DATA) >> 8;
 2fe:	83 e0       	ldi	r24, 0x03	; 3
 300:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <__TEXT_REGION_LENGTH__+0x70011d>
	DMA.CH0.DESTADDR2	= 0x00;
 304:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__TEXT_REGION_LENGTH__+0x70011e>
 308:	08 95       	ret

0000030a <setTimers>:
// Affected: TCC0_PER, TCC1_PER, TCC0_INTCTRLA, TCC1_INTCTRLA, TCC0_INTCTRLA, 
// 			 TCC1_INTCTRLA
void setTimers(void){
	
	//Set the period.
	TCC0_PER = PERIOD_300HZ;
 30a:	8a ea       	ldi	r24, 0xAA	; 170
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 312:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
	
	// Enable the interrupt and then the timer.
	TCC0_INTCTRLA = TC_OVFINTLVL_LO_gc;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
	
	// Set a prescaler of 2 for greater accuracy.
	TCC0_CTRLA = TC_CLKSEL_OFF_gc;
 31c:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
	
	//Set the period.
	TCC1_PER = 0x1000;
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e1       	ldi	r19, 0x10	; 16
 324:	20 93 66 08 	sts	0x0866, r18	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
 328:	30 93 67 08 	sts	0x0867, r19	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
	
	// Enable the interrupt and then the timer.
	TCC1_INTCTRLA = TC_OVFINTLVL_LO_gc;
 32c:	80 93 46 08 	sts	0x0846, r24	; 0x800846 <__TEXT_REGION_LENGTH__+0x700846>
	
	// Set a prescaler of 2 for greater accuracy.
	TCC1_CTRLA = TC_CLKSEL_DIV1024_gc;
 330:	87 e0       	ldi	r24, 0x07	; 7
 332:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
 336:	08 95       	ret

00000338 <switchWaveform>:
void switchWaveform(void){
	// Set state to determine the current waveform.
	static uint8_t waveState = SAW;

	// Disable the DMA. 
	DMA.CH0.CTRLA &= ~DMA_CH_ENABLE_bm;
 338:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__TEXT_REGION_LENGTH__+0x700110>
 33c:	8f 77       	andi	r24, 0x7F	; 127
 33e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__TEXT_REGION_LENGTH__+0x700110>
	while(!(DMA.CH0.CTRLA | DMA_CH_ENABLE_bm));
 342:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__TEXT_REGION_LENGTH__+0x700110>

	// Update the DMA source depending on the state.
	if(waveState == SINE){
 346:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
 34a:	81 11       	cpse	r24, r1
 34c:	0c c0       	rjmp	.+24     	; 0x366 <switchWaveform+0x2e>
		DMA.CH0.SRCADDR0	= ( (uint16_t) sineLUTData) >> 0;
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	92 e2       	ldi	r25, 0x22	; 34
 352:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__TEXT_REGION_LENGTH__+0x700118>
		DMA.CH0.SRCADDR1	= ( (uint16_t) sineLUTData) >> 8;
 356:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__TEXT_REGION_LENGTH__+0x700119>
		DMA.CH0.SRCADDR2	= 0x00;
 35a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__TEXT_REGION_LENGTH__+0x70011a>
		waveState = SAW;
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
 364:	0c c0       	rjmp	.+24     	; 0x37e <switchWaveform+0x46>
	}else if(waveState == SAW){
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	51 f4       	brne	.+20     	; 0x37e <switchWaveform+0x46>
		DMA.CH0.SRCADDR0	= ( (uint16_t) sawLUTData) >> 0;
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	90 e2       	ldi	r25, 0x20	; 32
 36e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__TEXT_REGION_LENGTH__+0x700118>
		DMA.CH0.SRCADDR1	= ( (uint16_t) sawLUTData) >> 8;
 372:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__TEXT_REGION_LENGTH__+0x700119>
		DMA.CH0.SRCADDR2	= 0x00;
 376:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__TEXT_REGION_LENGTH__+0x70011a>
		waveState = SINE;
 37a:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__data_start>
	}

	// Re-enable the DMA and reset its block size.
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
 37e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__TEXT_REGION_LENGTH__+0x700110>
 382:	80 68       	ori	r24, 0x80	; 128
 384:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__TEXT_REGION_LENGTH__+0x700110>
	DMA.CH0.TRFCNT		= 512;
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	92 e0       	ldi	r25, 0x02	; 2
 38c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__TEXT_REGION_LENGTH__+0x700114>
 390:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__TEXT_REGION_LENGTH__+0x700115>
 394:	08 95       	ret

00000396 <roundDouble>:
// Subroutine Name: roundDouble
// Change the output frequncy to the passed frequency.
// Inputs: double d - Double to be rounded.
// Outputs: uint16_t - Rounded integer value of the passed double.
// Affected: None
uint16_t roundDouble(double d){
 396:	cf 92       	push	r12
 398:	df 92       	push	r13
 39a:	ef 92       	push	r14
 39c:	ff 92       	push	r15
 39e:	6b 01       	movw	r12, r22
 3a0:	7c 01       	movw	r14, r24
	return d < 0 ? d - 0.5 : d + 0.5;
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	a9 01       	movw	r20, r18
 3a8:	0e 94 46 03 	call	0x68c	; 0x68c <__cmpsf2>
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	40 e0       	ldi	r20, 0x00	; 0
 3b2:	5f e3       	ldi	r21, 0x3F	; 63
 3b4:	87 ff       	sbrs	r24, 7
 3b6:	05 c0       	rjmp	.+10     	; 0x3c2 <roundDouble+0x2c>
 3b8:	c7 01       	movw	r24, r14
 3ba:	b6 01       	movw	r22, r12
 3bc:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__subsf3>
 3c0:	04 c0       	rjmp	.+8      	; 0x3ca <roundDouble+0x34>
 3c2:	c7 01       	movw	r24, r14
 3c4:	b6 01       	movw	r22, r12
 3c6:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__addsf3>
 3ca:	0e 94 bd 03 	call	0x77a	; 0x77a <__fixunssfsi>
 3ce:	cb 01       	movw	r24, r22
}
 3d0:	ff 90       	pop	r15
 3d2:	ef 90       	pop	r14
 3d4:	df 90       	pop	r13
 3d6:	cf 90       	pop	r12
 3d8:	08 95       	ret

000003da <playFrequency>:
// Subroutine Name: playFrequency
// Change the output frequncy to the passed frequency.
// Inputs: double frequency - Frequency to be outputted. 
// Outputs: None
// Affected: TCC0_PER
void playFrequency(double frequency){
 3da:	9b 01       	movw	r18, r22
 3dc:	ac 01       	movw	r20, r24
	
	double newPeriod = (PERIOD_300HZ * 300.0) / frequency;
	uint16_t newIntPeriod = roundDouble(newPeriod);
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	7c e9       	ldi	r23, 0x9C	; 156
 3e2:	89 ef       	ldi	r24, 0xF9	; 249
 3e4:	97 e4       	ldi	r25, 0x47	; 71
 3e6:	0e 94 4b 03 	call	0x696	; 0x696 <__divsf3>
 3ea:	0e 94 cb 01 	call	0x396	; 0x396 <roundDouble>
	TCC0_PER = newIntPeriod;
 3ee:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 3f2:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
 3f6:	08 95       	ret

000003f8 <main>:

static char input = '0';
int main(void)
{
	// Init CLK, pin dir, and ADC.
	INIT_CLK();
 3f8:	0e 94 1e 01 	call	0x23c	; 0x23c <INIT_CLK>
	INIT_USART();
 3fc:	0e 94 2e 01 	call	0x25c	; 0x25c <INIT_USART>
	INIT_DAC();
 400:	0e 94 49 01 	call	0x292	; 0x292 <INIT_DAC>
	INIT_DMA();
 404:	0e 94 57 01 	call	0x2ae	; 0x2ae <INIT_DMA>
	setTimers();
 408:	0e 94 85 01 	call	0x30a	; 0x30a <setTimers>
	INIT_INTS();
 40c:	0e 94 42 01 	call	0x284	; 0x284 <INIT_INTS>
	PORTC_DIRSET = 0x80;
 410:	80 e8       	ldi	r24, 0x80	; 128
 412:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	PORTC_OUT = 0x80;
 416:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <__TEXT_REGION_LENGTH__+0x700644>
		}else if( (input == 'O') | (input == 'o') ){
			TCC0_CTRLA = TC_CLKSEL_DIV1_gc;
			playFrequency(2093.00);
		
		}else if( (input == '9') ){
			TCC0_CTRLA = TC_CLKSEL_DIV1_gc;
 41a:	c1 e0       	ldi	r28, 0x01	; 1
	PORTC_DIRSET = 0x80;
	PORTC_OUT = 0x80;
	while (1){

		// Manage the input. 
		if( (input == 'S') | (input == 's') ) {
 41c:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <input>
 420:	89 2f       	mov	r24, r25
 422:	8f 7d       	andi	r24, 0xDF	; 223
 424:	83 35       	cpi	r24, 0x53	; 83
 426:	29 f4       	brne	.+10     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
			switchWaveform();
 428:	0e 94 9c 01 	call	0x338	; 0x338 <switchWaveform>
			input =0;
 42c:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <input>
 430:	f5 cf       	rjmp	.-22     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		}else if( (input == 'W') | (input == 'w') ){
 432:	87 35       	cpi	r24, 0x57	; 87
 434:	39 f4       	brne	.+14     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			TCC0_CTRLA = TC_CLKSEL_DIV1_gc;
 436:	c0 93 00 08 	sts	0x0800, r28	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
			playFrequency(1046.5);
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	70 ed       	ldi	r23, 0xD0	; 208
 43e:	82 e8       	ldi	r24, 0x82	; 130
 440:	94 e4       	ldi	r25, 0x44	; 68
 442:	74 c0       	rjmp	.+232    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		
		}else if( (input == '3') ){
 444:	93 33       	cpi	r25, 0x33	; 51
 446:	39 f4       	brne	.+14     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			TCC0_CTRLA = TC_CLKSEL_DIV1_gc;
 448:	c0 93 00 08 	sts	0x0800, r28	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
			playFrequency(1108.73);
 44c:	6c e5       	ldi	r22, 0x5C	; 92
 44e:	77 e9       	ldi	r23, 0x97	; 151
 450:	8a e8       	ldi	r24, 0x8A	; 138
 452:	94 e4       	ldi	r25, 0x44	; 68
 454:	6b c0       	rjmp	.+214    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		
		}else if( (input == 'E') | (input == 'e') ){
 456:	85 34       	cpi	r24, 0x45	; 69
 458:	39 f4       	brne	.+14     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
			TCC0_CTRLA = TC_CLKSEL_DIV1_gc;
 45a:	c0 93 00 08 	sts	0x0800, r28	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
			playFrequency(1174.66);
 45e:	6f e1       	ldi	r22, 0x1F	; 31
 460:	75 ed       	ldi	r23, 0xD5	; 213
 462:	82 e9       	ldi	r24, 0x92	; 146
 464:	94 e4       	ldi	r25, 0x44	; 68
 466:	62 c0       	rjmp	.+196    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		
		}else if( (input == '4') ){
 468:	94 33       	cpi	r25, 0x34	; 52
 46a:	39 f4       	brne	.+14     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
			TCC0_CTRLA = TC_CLKSEL_DIV1_gc;
 46c:	c0 93 00 08 	sts	0x0800, r28	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
			playFrequency(1244.51);
 470:	62 e5       	ldi	r22, 0x52	; 82
 472:	70 e9       	ldi	r23, 0x90	; 144
 474:	8b e9       	ldi	r24, 0x9B	; 155
 476:	94 e4       	ldi	r25, 0x44	; 68
 478:	59 c0       	rjmp	.+178    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		
		}else if( (input == 'R') | (input == 'r') ){
 47a:	82 35       	cpi	r24, 0x52	; 82
 47c:	39 f4       	brne	.+14     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
			TCC0_CTRLA = TC_CLKSEL_DIV1_gc;
 47e:	c0 93 00 08 	sts	0x0800, r28	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
			playFrequency(1318.51);
 482:	62 e5       	ldi	r22, 0x52	; 82
 484:	70 ed       	ldi	r23, 0xD0	; 208
 486:	84 ea       	ldi	r24, 0xA4	; 164
 488:	94 e4       	ldi	r25, 0x44	; 68
 48a:	50 c0       	rjmp	.+160    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		
		}else if( (input == 'T') | (input == 't') ){
 48c:	84 35       	cpi	r24, 0x54	; 84
 48e:	39 f4       	brne	.+14     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
			TCC0_CTRLA = TC_CLKSEL_DIV1_gc;
 490:	c0 93 00 08 	sts	0x0800, r28	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
			playFrequency(1396.91);
 494:	6f e1       	ldi	r22, 0x1F	; 31
 496:	7d e9       	ldi	r23, 0x9D	; 157
 498:	8e ea       	ldi	r24, 0xAE	; 174
 49a:	94 e4       	ldi	r25, 0x44	; 68
 49c:	47 c0       	rjmp	.+142    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		
		}else if( (input == '6') ){
 49e:	96 33       	cpi	r25, 0x36	; 54
 4a0:	39 f4       	brne	.+14     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
			TCC0_CTRLA = TC_CLKSEL_DIV1_gc;
 4a2:	c0 93 00 08 	sts	0x0800, r28	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
			playFrequency(1479.98);
 4a6:	6c e5       	ldi	r22, 0x5C	; 92
 4a8:	7f ef       	ldi	r23, 0xFF	; 255
 4aa:	88 eb       	ldi	r24, 0xB8	; 184
 4ac:	94 e4       	ldi	r25, 0x44	; 68
 4ae:	3e c0       	rjmp	.+124    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		
		}else if( (input == 'Y') | (input == 'y') ){
 4b0:	89 35       	cpi	r24, 0x59	; 89
 4b2:	39 f4       	brne	.+14     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
			TCC0_CTRLA = TC_CLKSEL_DIV1_gc;
 4b4:	c0 93 00 08 	sts	0x0800, r28	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
			playFrequency(1567.98);
 4b8:	6c e5       	ldi	r22, 0x5C	; 92
 4ba:	7f ef       	ldi	r23, 0xFF	; 255
 4bc:	83 ec       	ldi	r24, 0xC3	; 195
 4be:	94 e4       	ldi	r25, 0x44	; 68
 4c0:	35 c0       	rjmp	.+106    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		
		}else if( (input == '7') ){
 4c2:	97 33       	cpi	r25, 0x37	; 55
 4c4:	39 f4       	brne	.+14     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
			TCC0_CTRLA = TC_CLKSEL_DIV1_gc;
 4c6:	c0 93 00 08 	sts	0x0800, r28	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
			playFrequency(1661.22);
 4ca:	6a e0       	ldi	r22, 0x0A	; 10
 4cc:	77 ea       	ldi	r23, 0xA7	; 167
 4ce:	8f ec       	ldi	r24, 0xCF	; 207
 4d0:	94 e4       	ldi	r25, 0x44	; 68
 4d2:	2c c0       	rjmp	.+88     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		
		}else if( (input == 'U') | (input == 'u') ){
 4d4:	85 35       	cpi	r24, 0x55	; 85
 4d6:	39 f4       	brne	.+14     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
			TCC0_CTRLA = TC_CLKSEL_DIV1_gc;
 4d8:	c0 93 00 08 	sts	0x0800, r28	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
			playFrequency(1760.00);
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	8c ed       	ldi	r24, 0xDC	; 220
 4e2:	94 e4       	ldi	r25, 0x44	; 68
 4e4:	23 c0       	rjmp	.+70     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
			
		}else if( (input == '8') ){
 4e6:	98 33       	cpi	r25, 0x38	; 56
 4e8:	39 f4       	brne	.+14     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
			TCC0_CTRLA = TC_CLKSEL_DIV1_gc;
 4ea:	c0 93 00 08 	sts	0x0800, r28	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
			playFrequency(1864.66);
 4ee:	6f e1       	ldi	r22, 0x1F	; 31
 4f0:	75 e1       	ldi	r23, 0x15	; 21
 4f2:	89 ee       	ldi	r24, 0xE9	; 233
 4f4:	94 e4       	ldi	r25, 0x44	; 68
 4f6:	1a c0       	rjmp	.+52     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		
		}else if( (input == 'I') | (input == 'i') ){
 4f8:	89 34       	cpi	r24, 0x49	; 73
 4fa:	39 f4       	brne	.+14     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
			TCC0_CTRLA = TC_CLKSEL_DIV1_gc;
 4fc:	c0 93 00 08 	sts	0x0800, r28	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
			playFrequency(1975.53);
 500:	66 ef       	ldi	r22, 0xF6	; 246
 502:	70 ef       	ldi	r23, 0xF0	; 240
 504:	86 ef       	ldi	r24, 0xF6	; 246
 506:	94 e4       	ldi	r25, 0x44	; 68
 508:	11 c0       	rjmp	.+34     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		
		}else if( (input == 'O') | (input == 'o') ){
 50a:	8f 34       	cpi	r24, 0x4F	; 79
 50c:	39 f4       	brne	.+14     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
			TCC0_CTRLA = TC_CLKSEL_DIV1_gc;
 50e:	c0 93 00 08 	sts	0x0800, r28	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
			playFrequency(2093.00);
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	70 ed       	ldi	r23, 0xD0	; 208
 516:	82 e0       	ldi	r24, 0x02	; 2
 518:	95 e4       	ldi	r25, 0x45	; 69
 51a:	08 c0       	rjmp	.+16     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
		
		}else if( (input == '9') ){
 51c:	99 33       	cpi	r25, 0x39	; 57
 51e:	49 f4       	brne	.+18     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
			TCC0_CTRLA = TC_CLKSEL_DIV1_gc;
 520:	c0 93 00 08 	sts	0x0800, r28	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
			playFrequency(2217.46);
 524:	6c e5       	ldi	r22, 0x5C	; 92
 526:	77 e9       	ldi	r23, 0x97	; 151
 528:	8a e0       	ldi	r24, 0x0A	; 10
 52a:	95 e4       	ldi	r25, 0x45	; 69
 52c:	0e 94 ed 01 	call	0x3da	; 0x3da <playFrequency>
 530:	75 cf       	rjmp	.-278    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		
		}else
			// If the input is not one of the defined above output nothing.
			DACA.CH1DATA = 0x00;
 532:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <__TEXT_REGION_LENGTH__+0x70031a>
 536:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <__TEXT_REGION_LENGTH__+0x70031b>
 53a:	70 cf       	rjmp	.-288    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>

0000053c <__vector_14>:
// Sets up an interrupt to be triggered by TCC0 being overflown.
// Inputs: None
// Outputs: None
// Affected: None
ISR(TCC0_OVF_vect)
{
 53c:	1f 92       	push	r1
 53e:	0f 92       	push	r0
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	0f 92       	push	r0
 544:	11 24       	eor	r1, r1
 546:	08 b6       	in	r0, 0x38	; 56
 548:	0f 92       	push	r0
 54a:	18 be       	out	0x38, r1	; 56
	return;
}
 54c:	0f 90       	pop	r0
 54e:	08 be       	out	0x38, r0	; 56
 550:	0f 90       	pop	r0
 552:	0f be       	out	0x3f, r0	; 63
 554:	0f 90       	pop	r0
 556:	1f 90       	pop	r1
 558:	18 95       	reti

0000055a <__vector_20>:
/*********************INTERUPT****************************************/
// Sets up an interrupt to be triggered by TCC1 being overflown.
// Inputs: None
// Outputs: None
// Affected: TCC0_CTRLA, input
ISR(TCC1_OVF_vect){
 55a:	1f 92       	push	r1
 55c:	0f 92       	push	r0
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	0f 92       	push	r0
 562:	11 24       	eor	r1, r1
 564:	08 b6       	in	r0, 0x38	; 56
 566:	0f 92       	push	r0
 568:	18 be       	out	0x38, r1	; 56
	input = 0;
 56a:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <input>
	TCC0_CTRLA = TC_CLKSEL_OFF_gc;
 56e:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>

	return;
}
 572:	0f 90       	pop	r0
 574:	08 be       	out	0x38, r0	; 56
 576:	0f 90       	pop	r0
 578:	0f be       	out	0x3f, r0	; 63
 57a:	0f 90       	pop	r0
 57c:	1f 90       	pop	r1
 57e:	18 95       	reti

00000580 <__vector_88>:
// Sets up an interrupt to be triggered by a character being 
// over UART. 
// Inputs: None
// Outputs: None
// Affected: TCC1_CNT, input
ISR(USARTD0_RXC_vect){
 580:	1f 92       	push	r1
 582:	0f 92       	push	r0
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	0f 92       	push	r0
 588:	11 24       	eor	r1, r1
 58a:	08 b6       	in	r0, 0x38	; 56
 58c:	0f 92       	push	r0
 58e:	18 be       	out	0x38, r1	; 56
 590:	8f 93       	push	r24
	TCC1_CNT = 0;
 592:	10 92 60 08 	sts	0x0860, r1	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
 596:	10 92 61 08 	sts	0x0861, r1	; 0x800861 <__TEXT_REGION_LENGTH__+0x700861>
	input = USARTD0_DATA;
 59a:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 59e:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <input>

	return;
}
 5a2:	8f 91       	pop	r24
 5a4:	0f 90       	pop	r0
 5a6:	08 be       	out	0x38, r0	; 56
 5a8:	0f 90       	pop	r0
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	0f 90       	pop	r0
 5ae:	1f 90       	pop	r1
 5b0:	18 95       	reti

000005b2 <__subsf3>:
 5b2:	50 58       	subi	r21, 0x80	; 128

000005b4 <__addsf3>:
 5b4:	bb 27       	eor	r27, r27
 5b6:	aa 27       	eor	r26, r26
 5b8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__addsf3x>
 5bc:	0c 94 27 04 	jmp	0x84e	; 0x84e <__fp_round>
 5c0:	0e 94 19 04 	call	0x832	; 0x832 <__fp_pscA>
 5c4:	38 f0       	brcs	.+14     	; 0x5d4 <__addsf3+0x20>
 5c6:	0e 94 20 04 	call	0x840	; 0x840 <__fp_pscB>
 5ca:	20 f0       	brcs	.+8      	; 0x5d4 <__addsf3+0x20>
 5cc:	39 f4       	brne	.+14     	; 0x5dc <__addsf3+0x28>
 5ce:	9f 3f       	cpi	r25, 0xFF	; 255
 5d0:	19 f4       	brne	.+6      	; 0x5d8 <__addsf3+0x24>
 5d2:	26 f4       	brtc	.+8      	; 0x5dc <__addsf3+0x28>
 5d4:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_nan>
 5d8:	0e f4       	brtc	.+2      	; 0x5dc <__addsf3+0x28>
 5da:	e0 95       	com	r30
 5dc:	e7 fb       	bst	r30, 7
 5de:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_inf>

000005e2 <__addsf3x>:
 5e2:	e9 2f       	mov	r30, r25
 5e4:	0e 94 38 04 	call	0x870	; 0x870 <__fp_split3>
 5e8:	58 f3       	brcs	.-42     	; 0x5c0 <__addsf3+0xc>
 5ea:	ba 17       	cp	r27, r26
 5ec:	62 07       	cpc	r22, r18
 5ee:	73 07       	cpc	r23, r19
 5f0:	84 07       	cpc	r24, r20
 5f2:	95 07       	cpc	r25, r21
 5f4:	20 f0       	brcs	.+8      	; 0x5fe <__addsf3x+0x1c>
 5f6:	79 f4       	brne	.+30     	; 0x616 <__addsf3x+0x34>
 5f8:	a6 f5       	brtc	.+104    	; 0x662 <__addsf3x+0x80>
 5fa:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_zero>
 5fe:	0e f4       	brtc	.+2      	; 0x602 <__addsf3x+0x20>
 600:	e0 95       	com	r30
 602:	0b 2e       	mov	r0, r27
 604:	ba 2f       	mov	r27, r26
 606:	a0 2d       	mov	r26, r0
 608:	0b 01       	movw	r0, r22
 60a:	b9 01       	movw	r22, r18
 60c:	90 01       	movw	r18, r0
 60e:	0c 01       	movw	r0, r24
 610:	ca 01       	movw	r24, r20
 612:	a0 01       	movw	r20, r0
 614:	11 24       	eor	r1, r1
 616:	ff 27       	eor	r31, r31
 618:	59 1b       	sub	r21, r25
 61a:	99 f0       	breq	.+38     	; 0x642 <__addsf3x+0x60>
 61c:	59 3f       	cpi	r21, 0xF9	; 249
 61e:	50 f4       	brcc	.+20     	; 0x634 <__addsf3x+0x52>
 620:	50 3e       	cpi	r21, 0xE0	; 224
 622:	68 f1       	brcs	.+90     	; 0x67e <__addsf3x+0x9c>
 624:	1a 16       	cp	r1, r26
 626:	f0 40       	sbci	r31, 0x00	; 0
 628:	a2 2f       	mov	r26, r18
 62a:	23 2f       	mov	r18, r19
 62c:	34 2f       	mov	r19, r20
 62e:	44 27       	eor	r20, r20
 630:	58 5f       	subi	r21, 0xF8	; 248
 632:	f3 cf       	rjmp	.-26     	; 0x61a <__addsf3x+0x38>
 634:	46 95       	lsr	r20
 636:	37 95       	ror	r19
 638:	27 95       	ror	r18
 63a:	a7 95       	ror	r26
 63c:	f0 40       	sbci	r31, 0x00	; 0
 63e:	53 95       	inc	r21
 640:	c9 f7       	brne	.-14     	; 0x634 <__addsf3x+0x52>
 642:	7e f4       	brtc	.+30     	; 0x662 <__addsf3x+0x80>
 644:	1f 16       	cp	r1, r31
 646:	ba 0b       	sbc	r27, r26
 648:	62 0b       	sbc	r22, r18
 64a:	73 0b       	sbc	r23, r19
 64c:	84 0b       	sbc	r24, r20
 64e:	ba f0       	brmi	.+46     	; 0x67e <__addsf3x+0x9c>
 650:	91 50       	subi	r25, 0x01	; 1
 652:	a1 f0       	breq	.+40     	; 0x67c <__addsf3x+0x9a>
 654:	ff 0f       	add	r31, r31
 656:	bb 1f       	adc	r27, r27
 658:	66 1f       	adc	r22, r22
 65a:	77 1f       	adc	r23, r23
 65c:	88 1f       	adc	r24, r24
 65e:	c2 f7       	brpl	.-16     	; 0x650 <__addsf3x+0x6e>
 660:	0e c0       	rjmp	.+28     	; 0x67e <__addsf3x+0x9c>
 662:	ba 0f       	add	r27, r26
 664:	62 1f       	adc	r22, r18
 666:	73 1f       	adc	r23, r19
 668:	84 1f       	adc	r24, r20
 66a:	48 f4       	brcc	.+18     	; 0x67e <__addsf3x+0x9c>
 66c:	87 95       	ror	r24
 66e:	77 95       	ror	r23
 670:	67 95       	ror	r22
 672:	b7 95       	ror	r27
 674:	f7 95       	ror	r31
 676:	9e 3f       	cpi	r25, 0xFE	; 254
 678:	08 f0       	brcs	.+2      	; 0x67c <__addsf3x+0x9a>
 67a:	b0 cf       	rjmp	.-160    	; 0x5dc <__addsf3+0x28>
 67c:	93 95       	inc	r25
 67e:	88 0f       	add	r24, r24
 680:	08 f0       	brcs	.+2      	; 0x684 <__addsf3x+0xa2>
 682:	99 27       	eor	r25, r25
 684:	ee 0f       	add	r30, r30
 686:	97 95       	ror	r25
 688:	87 95       	ror	r24
 68a:	08 95       	ret

0000068c <__cmpsf2>:
 68c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__fp_cmp>
 690:	08 f4       	brcc	.+2      	; 0x694 <__cmpsf2+0x8>
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	08 95       	ret

00000696 <__divsf3>:
 696:	0e 94 5f 03 	call	0x6be	; 0x6be <__divsf3x>
 69a:	0c 94 27 04 	jmp	0x84e	; 0x84e <__fp_round>
 69e:	0e 94 20 04 	call	0x840	; 0x840 <__fp_pscB>
 6a2:	58 f0       	brcs	.+22     	; 0x6ba <__divsf3+0x24>
 6a4:	0e 94 19 04 	call	0x832	; 0x832 <__fp_pscA>
 6a8:	40 f0       	brcs	.+16     	; 0x6ba <__divsf3+0x24>
 6aa:	29 f4       	brne	.+10     	; 0x6b6 <__divsf3+0x20>
 6ac:	5f 3f       	cpi	r21, 0xFF	; 255
 6ae:	29 f0       	breq	.+10     	; 0x6ba <__divsf3+0x24>
 6b0:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_inf>
 6b4:	51 11       	cpse	r21, r1
 6b6:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__fp_szero>
 6ba:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_nan>

000006be <__divsf3x>:
 6be:	0e 94 38 04 	call	0x870	; 0x870 <__fp_split3>
 6c2:	68 f3       	brcs	.-38     	; 0x69e <__divsf3+0x8>

000006c4 <__divsf3_pse>:
 6c4:	99 23       	and	r25, r25
 6c6:	b1 f3       	breq	.-20     	; 0x6b4 <__divsf3+0x1e>
 6c8:	55 23       	and	r21, r21
 6ca:	91 f3       	breq	.-28     	; 0x6b0 <__divsf3+0x1a>
 6cc:	95 1b       	sub	r25, r21
 6ce:	55 0b       	sbc	r21, r21
 6d0:	bb 27       	eor	r27, r27
 6d2:	aa 27       	eor	r26, r26
 6d4:	62 17       	cp	r22, r18
 6d6:	73 07       	cpc	r23, r19
 6d8:	84 07       	cpc	r24, r20
 6da:	38 f0       	brcs	.+14     	; 0x6ea <__divsf3_pse+0x26>
 6dc:	9f 5f       	subi	r25, 0xFF	; 255
 6de:	5f 4f       	sbci	r21, 0xFF	; 255
 6e0:	22 0f       	add	r18, r18
 6e2:	33 1f       	adc	r19, r19
 6e4:	44 1f       	adc	r20, r20
 6e6:	aa 1f       	adc	r26, r26
 6e8:	a9 f3       	breq	.-22     	; 0x6d4 <__divsf3_pse+0x10>
 6ea:	35 d0       	rcall	.+106    	; 0x756 <__divsf3_pse+0x92>
 6ec:	0e 2e       	mov	r0, r30
 6ee:	3a f0       	brmi	.+14     	; 0x6fe <__divsf3_pse+0x3a>
 6f0:	e0 e8       	ldi	r30, 0x80	; 128
 6f2:	32 d0       	rcall	.+100    	; 0x758 <__divsf3_pse+0x94>
 6f4:	91 50       	subi	r25, 0x01	; 1
 6f6:	50 40       	sbci	r21, 0x00	; 0
 6f8:	e6 95       	lsr	r30
 6fa:	00 1c       	adc	r0, r0
 6fc:	ca f7       	brpl	.-14     	; 0x6f0 <__divsf3_pse+0x2c>
 6fe:	2b d0       	rcall	.+86     	; 0x756 <__divsf3_pse+0x92>
 700:	fe 2f       	mov	r31, r30
 702:	29 d0       	rcall	.+82     	; 0x756 <__divsf3_pse+0x92>
 704:	66 0f       	add	r22, r22
 706:	77 1f       	adc	r23, r23
 708:	88 1f       	adc	r24, r24
 70a:	bb 1f       	adc	r27, r27
 70c:	26 17       	cp	r18, r22
 70e:	37 07       	cpc	r19, r23
 710:	48 07       	cpc	r20, r24
 712:	ab 07       	cpc	r26, r27
 714:	b0 e8       	ldi	r27, 0x80	; 128
 716:	09 f0       	breq	.+2      	; 0x71a <__divsf3_pse+0x56>
 718:	bb 0b       	sbc	r27, r27
 71a:	80 2d       	mov	r24, r0
 71c:	bf 01       	movw	r22, r30
 71e:	ff 27       	eor	r31, r31
 720:	93 58       	subi	r25, 0x83	; 131
 722:	5f 4f       	sbci	r21, 0xFF	; 255
 724:	3a f0       	brmi	.+14     	; 0x734 <__divsf3_pse+0x70>
 726:	9e 3f       	cpi	r25, 0xFE	; 254
 728:	51 05       	cpc	r21, r1
 72a:	78 f0       	brcs	.+30     	; 0x74a <__divsf3_pse+0x86>
 72c:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_inf>
 730:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__fp_szero>
 734:	5f 3f       	cpi	r21, 0xFF	; 255
 736:	e4 f3       	brlt	.-8      	; 0x730 <__divsf3_pse+0x6c>
 738:	98 3e       	cpi	r25, 0xE8	; 232
 73a:	d4 f3       	brlt	.-12     	; 0x730 <__divsf3_pse+0x6c>
 73c:	86 95       	lsr	r24
 73e:	77 95       	ror	r23
 740:	67 95       	ror	r22
 742:	b7 95       	ror	r27
 744:	f7 95       	ror	r31
 746:	9f 5f       	subi	r25, 0xFF	; 255
 748:	c9 f7       	brne	.-14     	; 0x73c <__divsf3_pse+0x78>
 74a:	88 0f       	add	r24, r24
 74c:	91 1d       	adc	r25, r1
 74e:	96 95       	lsr	r25
 750:	87 95       	ror	r24
 752:	97 f9       	bld	r25, 7
 754:	08 95       	ret
 756:	e1 e0       	ldi	r30, 0x01	; 1
 758:	66 0f       	add	r22, r22
 75a:	77 1f       	adc	r23, r23
 75c:	88 1f       	adc	r24, r24
 75e:	bb 1f       	adc	r27, r27
 760:	62 17       	cp	r22, r18
 762:	73 07       	cpc	r23, r19
 764:	84 07       	cpc	r24, r20
 766:	ba 07       	cpc	r27, r26
 768:	20 f0       	brcs	.+8      	; 0x772 <__divsf3_pse+0xae>
 76a:	62 1b       	sub	r22, r18
 76c:	73 0b       	sbc	r23, r19
 76e:	84 0b       	sbc	r24, r20
 770:	ba 0b       	sbc	r27, r26
 772:	ee 1f       	adc	r30, r30
 774:	88 f7       	brcc	.-30     	; 0x758 <__divsf3_pse+0x94>
 776:	e0 95       	com	r30
 778:	08 95       	ret

0000077a <__fixunssfsi>:
 77a:	0e 94 40 04 	call	0x880	; 0x880 <__fp_splitA>
 77e:	88 f0       	brcs	.+34     	; 0x7a2 <__fixunssfsi+0x28>
 780:	9f 57       	subi	r25, 0x7F	; 127
 782:	98 f0       	brcs	.+38     	; 0x7aa <__fixunssfsi+0x30>
 784:	b9 2f       	mov	r27, r25
 786:	99 27       	eor	r25, r25
 788:	b7 51       	subi	r27, 0x17	; 23
 78a:	b0 f0       	brcs	.+44     	; 0x7b8 <__fixunssfsi+0x3e>
 78c:	e1 f0       	breq	.+56     	; 0x7c6 <__fixunssfsi+0x4c>
 78e:	66 0f       	add	r22, r22
 790:	77 1f       	adc	r23, r23
 792:	88 1f       	adc	r24, r24
 794:	99 1f       	adc	r25, r25
 796:	1a f0       	brmi	.+6      	; 0x79e <__fixunssfsi+0x24>
 798:	ba 95       	dec	r27
 79a:	c9 f7       	brne	.-14     	; 0x78e <__fixunssfsi+0x14>
 79c:	14 c0       	rjmp	.+40     	; 0x7c6 <__fixunssfsi+0x4c>
 79e:	b1 30       	cpi	r27, 0x01	; 1
 7a0:	91 f0       	breq	.+36     	; 0x7c6 <__fixunssfsi+0x4c>
 7a2:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_zero>
 7a6:	b1 e0       	ldi	r27, 0x01	; 1
 7a8:	08 95       	ret
 7aa:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_zero>
 7ae:	67 2f       	mov	r22, r23
 7b0:	78 2f       	mov	r23, r24
 7b2:	88 27       	eor	r24, r24
 7b4:	b8 5f       	subi	r27, 0xF8	; 248
 7b6:	39 f0       	breq	.+14     	; 0x7c6 <__fixunssfsi+0x4c>
 7b8:	b9 3f       	cpi	r27, 0xF9	; 249
 7ba:	cc f3       	brlt	.-14     	; 0x7ae <__fixunssfsi+0x34>
 7bc:	86 95       	lsr	r24
 7be:	77 95       	ror	r23
 7c0:	67 95       	ror	r22
 7c2:	b3 95       	inc	r27
 7c4:	d9 f7       	brne	.-10     	; 0x7bc <__fixunssfsi+0x42>
 7c6:	3e f4       	brtc	.+14     	; 0x7d6 <__fixunssfsi+0x5c>
 7c8:	90 95       	com	r25
 7ca:	80 95       	com	r24
 7cc:	70 95       	com	r23
 7ce:	61 95       	neg	r22
 7d0:	7f 4f       	sbci	r23, 0xFF	; 255
 7d2:	8f 4f       	sbci	r24, 0xFF	; 255
 7d4:	9f 4f       	sbci	r25, 0xFF	; 255
 7d6:	08 95       	ret

000007d8 <__fp_cmp>:
 7d8:	99 0f       	add	r25, r25
 7da:	00 08       	sbc	r0, r0
 7dc:	55 0f       	add	r21, r21
 7de:	aa 0b       	sbc	r26, r26
 7e0:	e0 e8       	ldi	r30, 0x80	; 128
 7e2:	fe ef       	ldi	r31, 0xFE	; 254
 7e4:	16 16       	cp	r1, r22
 7e6:	17 06       	cpc	r1, r23
 7e8:	e8 07       	cpc	r30, r24
 7ea:	f9 07       	cpc	r31, r25
 7ec:	c0 f0       	brcs	.+48     	; 0x81e <__fp_cmp+0x46>
 7ee:	12 16       	cp	r1, r18
 7f0:	13 06       	cpc	r1, r19
 7f2:	e4 07       	cpc	r30, r20
 7f4:	f5 07       	cpc	r31, r21
 7f6:	98 f0       	brcs	.+38     	; 0x81e <__fp_cmp+0x46>
 7f8:	62 1b       	sub	r22, r18
 7fa:	73 0b       	sbc	r23, r19
 7fc:	84 0b       	sbc	r24, r20
 7fe:	95 0b       	sbc	r25, r21
 800:	39 f4       	brne	.+14     	; 0x810 <__fp_cmp+0x38>
 802:	0a 26       	eor	r0, r26
 804:	61 f0       	breq	.+24     	; 0x81e <__fp_cmp+0x46>
 806:	23 2b       	or	r18, r19
 808:	24 2b       	or	r18, r20
 80a:	25 2b       	or	r18, r21
 80c:	21 f4       	brne	.+8      	; 0x816 <__fp_cmp+0x3e>
 80e:	08 95       	ret
 810:	0a 26       	eor	r0, r26
 812:	09 f4       	brne	.+2      	; 0x816 <__fp_cmp+0x3e>
 814:	a1 40       	sbci	r26, 0x01	; 1
 816:	a6 95       	lsr	r26
 818:	8f ef       	ldi	r24, 0xFF	; 255
 81a:	81 1d       	adc	r24, r1
 81c:	81 1d       	adc	r24, r1
 81e:	08 95       	ret

00000820 <__fp_inf>:
 820:	97 f9       	bld	r25, 7
 822:	9f 67       	ori	r25, 0x7F	; 127
 824:	80 e8       	ldi	r24, 0x80	; 128
 826:	70 e0       	ldi	r23, 0x00	; 0
 828:	60 e0       	ldi	r22, 0x00	; 0
 82a:	08 95       	ret

0000082c <__fp_nan>:
 82c:	9f ef       	ldi	r25, 0xFF	; 255
 82e:	80 ec       	ldi	r24, 0xC0	; 192
 830:	08 95       	ret

00000832 <__fp_pscA>:
 832:	00 24       	eor	r0, r0
 834:	0a 94       	dec	r0
 836:	16 16       	cp	r1, r22
 838:	17 06       	cpc	r1, r23
 83a:	18 06       	cpc	r1, r24
 83c:	09 06       	cpc	r0, r25
 83e:	08 95       	ret

00000840 <__fp_pscB>:
 840:	00 24       	eor	r0, r0
 842:	0a 94       	dec	r0
 844:	12 16       	cp	r1, r18
 846:	13 06       	cpc	r1, r19
 848:	14 06       	cpc	r1, r20
 84a:	05 06       	cpc	r0, r21
 84c:	08 95       	ret

0000084e <__fp_round>:
 84e:	09 2e       	mov	r0, r25
 850:	03 94       	inc	r0
 852:	00 0c       	add	r0, r0
 854:	11 f4       	brne	.+4      	; 0x85a <__fp_round+0xc>
 856:	88 23       	and	r24, r24
 858:	52 f0       	brmi	.+20     	; 0x86e <__fp_round+0x20>
 85a:	bb 0f       	add	r27, r27
 85c:	40 f4       	brcc	.+16     	; 0x86e <__fp_round+0x20>
 85e:	bf 2b       	or	r27, r31
 860:	11 f4       	brne	.+4      	; 0x866 <__fp_round+0x18>
 862:	60 ff       	sbrs	r22, 0
 864:	04 c0       	rjmp	.+8      	; 0x86e <__fp_round+0x20>
 866:	6f 5f       	subi	r22, 0xFF	; 255
 868:	7f 4f       	sbci	r23, 0xFF	; 255
 86a:	8f 4f       	sbci	r24, 0xFF	; 255
 86c:	9f 4f       	sbci	r25, 0xFF	; 255
 86e:	08 95       	ret

00000870 <__fp_split3>:
 870:	57 fd       	sbrc	r21, 7
 872:	90 58       	subi	r25, 0x80	; 128
 874:	44 0f       	add	r20, r20
 876:	55 1f       	adc	r21, r21
 878:	59 f0       	breq	.+22     	; 0x890 <__fp_splitA+0x10>
 87a:	5f 3f       	cpi	r21, 0xFF	; 255
 87c:	71 f0       	breq	.+28     	; 0x89a <__fp_splitA+0x1a>
 87e:	47 95       	ror	r20

00000880 <__fp_splitA>:
 880:	88 0f       	add	r24, r24
 882:	97 fb       	bst	r25, 7
 884:	99 1f       	adc	r25, r25
 886:	61 f0       	breq	.+24     	; 0x8a0 <__fp_splitA+0x20>
 888:	9f 3f       	cpi	r25, 0xFF	; 255
 88a:	79 f0       	breq	.+30     	; 0x8aa <__fp_splitA+0x2a>
 88c:	87 95       	ror	r24
 88e:	08 95       	ret
 890:	12 16       	cp	r1, r18
 892:	13 06       	cpc	r1, r19
 894:	14 06       	cpc	r1, r20
 896:	55 1f       	adc	r21, r21
 898:	f2 cf       	rjmp	.-28     	; 0x87e <__fp_split3+0xe>
 89a:	46 95       	lsr	r20
 89c:	f1 df       	rcall	.-30     	; 0x880 <__fp_splitA>
 89e:	08 c0       	rjmp	.+16     	; 0x8b0 <__fp_splitA+0x30>
 8a0:	16 16       	cp	r1, r22
 8a2:	17 06       	cpc	r1, r23
 8a4:	18 06       	cpc	r1, r24
 8a6:	99 1f       	adc	r25, r25
 8a8:	f1 cf       	rjmp	.-30     	; 0x88c <__fp_splitA+0xc>
 8aa:	86 95       	lsr	r24
 8ac:	71 05       	cpc	r23, r1
 8ae:	61 05       	cpc	r22, r1
 8b0:	08 94       	sec
 8b2:	08 95       	ret

000008b4 <__fp_zero>:
 8b4:	e8 94       	clt

000008b6 <__fp_szero>:
 8b6:	bb 27       	eor	r27, r27
 8b8:	66 27       	eor	r22, r22
 8ba:	77 27       	eor	r23, r23
 8bc:	cb 01       	movw	r24, r22
 8be:	97 f9       	bld	r25, 7
 8c0:	08 95       	ret

000008c2 <_exit>:
 8c2:	f8 94       	cli

000008c4 <__stop_program>:
 8c4:	ff cf       	rjmp	.-2      	; 0x8c4 <__stop_program>
